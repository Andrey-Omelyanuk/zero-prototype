const path = require('path')
const webpack = require('webpack')
const HtmlWebpackPlugin = require('html-webpack-plugin')


module.exports = function (env, argv) {
  var dotenv = require('dotenv').config({path: __dirname + '/.env.'+ argv.mode})

  return {
    target  : 'web', // Make web variables accessible to webpack, e.g. window
    entry   : './src/index.tsx',
    devtool :'source-map',

    output: {
      filename      : '[name].js',
      chunkFilename : '[name].chunk.js',
      publicPath    : '/', // if you don't put the "/" here, you get this error: "Uncaught SyntaxError: Unexpected token <"
    },

    module: {
      rules: [
        { test: /\.js$/, use: ["source-map-loader"], enforce: "pre" },
        { test: /\.tsx?$/, exclude: /node_modules/,  use: 'ts-loader' },
        // Preprocess 3rd party .css files located in node_modules
        { test: /\.css$/, include: /node_modules/, use: ['style-loader', 'css-loader'], },
        { test: /\.styl$/,
            use: [
              require.resolve('style-loader'), 
              { loader: 'css-loader'   , options: { sourceMap: true, }, },
              { loader: 'stylus-loader', options: { sourceMap: true, }, }
            ],
          },
        { test: /\.(eot|otf|ttf|woff|woff2)$/, use: 'file-loader', },
        { test: /\.(jpg|png|gif)$/, use: [
          { loader: 'url-loader', options: { limit: 10 * 1024, }, }, // Inline files smaller than 10 kB
          { loader: 'image-webpack-loader', options: {
              mozjpeg : { enabled: true, progressive: true, },
              gifsicle: { interlaced: false, },
              optipng : { optimizationLevel: 7, },
              pngquant: { quality: '65-90', speed: 4, },
            },
          },
        ],
      },
      ]
    },

    optimization: {
      minimize: false
    },

    plugins: [
      new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading
      new HtmlWebpackPlugin({
        template: './public/index.html',
        inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
      },),
      new webpack.DefinePlugin({
        "process.env": JSON.stringify(dotenv.parsed) ? JSON.stringify(dotenv.parsed) : "{}"
      })
    ],

    resolve: {
      modules: ['node_modules', './' ],
      extensions: ['.ts', '.tsx', '.js', '.jsx' ],
    },

    devServer: {
      contentBase: './dist', 
      historyApiFallback: {
        disableDotRule: true
      }
    }
  };
};
